<svg width="400" height="400" viewBox="0 0 800 800" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
      .rotating-group {
        transform-origin: center center; /* Rotates around the center of the group */
        animation: rotate 10s linear infinite;
      }
    </style>
  </defs>

  <rect x="0" y="0" width="800" height="800" fill="white" />

  <g class="rotating-group">
    <polygon
      points="400,280 503.8,340 503.8,460 400,520 296.2,460 296.2,340"
      fill="none"
      stroke="#B8860B"
      stroke-width="12" />

    <g stroke="#B8860B" stroke-width="4" stroke-linecap="butt">
      <script type="text/javascript">
        <![CDATA[
        const svg = document.querySelector('svg');
        const rayGroup = svg.querySelector('.rotating-group > g');

        // Center is updated for the new 800x800 viewBox
        const centerX = 400;
        const centerY = 400;

        // Radii adjusted for the new scale
        const innerRadius = 260;
        const outerRadius = 390;
        const numRays = 120;

        for (let i = 0; i < numRays; i++) {
          const angle = (i * (360 / numRays));
          const angleRad = angle * Math.PI / 180;

          const x1 = centerX + innerRadius * Math.cos(angleRad);
          const y1 = centerY + innerRadius * Math.sin(angleRad);
          const x2 = centerX + outerRadius * Math.cos(angleRad);
          const y2 = centerY + outerRadius * Math.sin(angleRad);

          const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
          line.setAttribute('x1', x1);
          line.setAttribute('y1', y1);
          line.setAttribute('x2', x2);
          line.setAttribute('y2', y2);

          // Alternating dashed effect
          if (i % 2 === 0) {
            const midRadius = (innerRadius + outerRadius) / 2;
            line.setAttribute('x2', centerX + midRadius * Math.cos(angleRad));
            line.setAttribute('y2', centerY + midRadius * Math.sin(angleRad));
          } else {
            const midRadius = (innerRadius + outerRadius) / 2;
            line.setAttribute('x1', centerX + midRadius * Math.cos(angleRad));
            line.setAttribute('y1', centerY + midRadius * Math.sin(angleRad));
          }
          rayGroup.appendChild(line);
        }
        ]]>
      </script>
    </g>
  </g>
</svg>
